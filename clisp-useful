Useful lisp stuff:

quote or '
list
defun
defparameter
setf
let* and let
first
rest
length
cons
append
reverse
random

concatenate
subseq

format
print
prin1
princ

t
numberp
oddp
evenp
=, >, <,...
string=
listp
eq
null
if
progn

dolist
values
cond
defun
defmacro
macroexpand
multiple-value-bind
float

read
read-char
write
write-char

setq
aref
elt
#\C
string
type-of

make-hash-table
make-array

gethash

defpackage
in-package

open
close

(defun open-bracket-macro-character (stream char) `,(read-delimited-list \#] stream t))
(set-macro-character #\[ #'open-bracket-macro-character)
(set-macro-character #\] (get-macro-character #\)))

documentation
zerop
&optional
&rest
&key
defvar
defparameter

[declaim [optimize [speed 0] [debug 3]]]

incf
decf

gensym
dotimes
dolist
do

defstruct
defclass

apropos
describe
inspect

nconc
car
cdr

rplaca rplacd
reduce
some
all
every
notany
notevery

map map-into maplist mapl mapcon mapcar mapc mapcan

elt
count
fill replace position find search mismatch
sort merge

disassemble

eq eql equal equalp
boole ; for bit logic

[defun exaple (a b &key [c 1] [d 2])
	nil
]

advise
watch

chapter 23 on signals and errors
24 - on format

defconstant ; Use +pi+ convention
provide
require

makunbound
cadr

intern symbol-name

The cool thing about lisp is that we're free to be free, but what about memory management?
Well, we could just go with lisp's gc, but that's a chicken's way out. Is there another
method? We could go manual:

	fn alpha(input: &'a str) -> &'a str {
		input[2..]
	}
	[fn alpha [input [& a str]]
	          [& a str]
		[subseq input 2]
	]

	[= cool 10]
	[= some [new 32u]]
	[= [some element] [new 32u]]
	[print "Toppest of keks"]
	[macro friend (a b c)
		[print [+ a b c]]
	]
	[let something [alpha "Quite cool"]]
	[alpha something]

This would be really clean, no use of ' or `, but then how do we create macros?

	[@ 1 2 3]

is the same as

	'[1 2 3]

Why does lisp evaluate eagerly? I think we shouldn't eval eagerly.

	[ignore [1 2 3]]  ;

	[+ 1 [- 3 3]]

	[macro let [name expr]
		[= name [eval expr]]
	]
